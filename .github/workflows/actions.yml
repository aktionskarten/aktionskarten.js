name: github-actions
on: [push]

jobs:
  get-tiles: 
    runs-on: ubuntu-latest
   steps:
      - uses: actions/cache@v2
        env:
          cache-name: cache-tiles
        with:
          path: .
          key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('**/package-lock.json') }}
          restore-keys: tiles
      - name: Download mbtiles
        run: wget https://aktionskarten.github.io/tileserver-gl-data/tiles.mbtiles

  test:
    needs: get-tiles
    runs-on: ubuntu-latest
    uses: actions/cache@v2
    env:
      cache-name: cache-tiles
    with:
      path: .
      key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('**/package-lock.json') }}
      restore-keys: tiles
    services:
      redis:
        image: redis
        ports:
          - 6379
      postgis:
        image: postgis/postgis:13-3.1-alpine
        ports:
          - 5432
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: maps
      tileserver:
        image: kombinat451/tileserver-gl
        ports:
          - 8085:80
        volumes:
          - tiles.mbtiles:/data/tiles.mbtiles
      backend:
        image: kombinat451/aktionskarten-backend-app
        ports:
          - 5000
        env:
          POSTGRES_HOST: postgis
          REDIS_HOST: redis
          TILESERVER_HOST: tileserver-gl:8085
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: maps
          FLASK_APP: app
          FLASK_ENV: production


    steps:
      - name: LS
        run: ls -alh
      - name: Checkout
        uses: actions/checkout@v2
      - name: Show docker containers
        run: docker ps -a
      - name: Install node
        uses: actions/setup-node@v2
        with:
          node-version: 11
      - name: Install dependencies
        run: npm i
      - name: Build
        run: npm run build
      - name: Run http-server
        run: npx http-server dist &
      - name: Docker compose logs
        run: docker-compose logs
      - name: Wait for backend
        run: bash -c 'while ! wget -q -t 1 http://localhost:5000/api/maps; do echo waiting; sleep 1; done;'
      - name: Run tests
        run: npm run test
      - name: Stop http-server
        run: pkill -f http-server

